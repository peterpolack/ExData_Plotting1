find.packag("devtools")
find.package("devtools")
install.packages("devtools")
find.package("devtools")
library(devtools)
find_rtools()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
a<-makeVector(c(1,2,3))
class(a)
class(a$get)
a$get
a$get9)
a$get()
a$set(8,9,10)
a$set(c(8,9,10))
a$get
a$get()
a$getmean()
a$setmean()
a$getmean(mean)
a$getmean(c(1,2,3))
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(makeVector(10:0))
cachemean(makeVector(10:0))
cachemean(x<-makeVector(10:0))
cachemean(x)
x<-makevector(1:10)
x<-makeVector(1:10)
cachemean(x)
cachemean(x)
x$getmean()
x$getmean()
cachemean(x)
x$get()
x$set(1:5)
cachemean(x)
x$get()
cachemean(x)
x$set(1:23)
cachemean(x)
cachemean(x)
x$get()
x$set(1:23)
cachemean(x)
cachemean(x)
cachemean(x)
cachmean(makevector(1:100))
cachemean(makevector(1:100))
cachemean(makeVector(1:100))
cachemean(x)
cachemean(x)
cachemean(x<-makeVector(1:100))
cachemean(x)
x$get
x$get()
x$set()
x$set(2:17)
x$get()
x$getmean()
x$setmean()
x$setmean(2:17)
x$getmean()
cachemean(x)
cachemean(x)
x$getmean()
x$get()
x$set(2:17)
cachemean(x)
matrx <- matrix(1:4,2)
matrx
solve(matrx)
matrx <- matrix(c(4,2,7,6),2)
matrx
solve(matrx)
setwd("C:/Users/polackpeter/Desktop/Soccer/Coursera/2014 Data Science Track/Reproducilebe Research/PeerAssessment1/RepData_PeerAssessment1")
activity <- read.csv("activity.csv")
summary(activity)
str(activity)
ddply(activity,~date,summarise,mean=mean(steps))
library("plyr", lib.loc="C:/Program Files/R/R-3.0.3/library")
ddply(activity,~date,summarise,mean=mean(steps))
ddply(activity,~date,summarise,sum=sum(steps))
?ddply
aggregate(activity$steps, by = list(date = df$date), FUN = "sum")
aggregate(activity$steps, by = list(date = activity$date), FUN = "sum")
aggregate(activity$steps, by = list(date = activity$date), FUN = "sum")
?aggregate()
x<-aggregate(activity$steps, by = list(date = activity$date), FUN = "sum")
mean(x$steps)
mean(x$steps, na.RM=TRUE)
mean(x$steps, na.rm=TRUE)
mean(as.numeric(x$steps), na.rm=TRUE)
mean(as.numeric(as.character(x$steps), na.rm=TRUE)
mean(as.numeric(as.character(x$steps)), na.rm=TRUE)
x
mean(x$x, na.rm=TRUE)
mean(x$x)
median(x$x, na.rm=TRUE)
hist(x$x,x$date)
hist(x$x)
hist(x$date)
hist$
?hist()
mean(x$x)
mean(x$x, na.rm=TRUE)
median(x$x, na.rm=TRUE)
hist(x$date)
hist(x$x)
hist(x$x)
mx=mean(x$x, na.rm=TRUE)
mx<-mean(x$x, na.rm=TRUE)
abline(v = mx, col = "blue", lwd = 2)
mm<-median(x$x, na.rm=TRUE)
abline(v = mm, col = "red", lwd = 2)
abline(v = mm, col = "red", lwd = 1)
abline(v = mx, col = "blue", lwd = 1)
names(x)
?aggregate
x<-aggregate(steps=activity$steps, by = list(date = activity$date), FUN = "sum")
x<-aggregate(list(steps=activity$steps), by = list(date = activity$date), FUN = "sum")
names(x)
x
dailysteps <- aggregate(list(steps=activity$steps), by = list(date = activity$date), FUN = "sum")
mean(dailysteps$steps)
mean(dailysteps$steps, na.rm=TRUE)
medain(dailysteps$steps, na.rm=TRUE)
median(dailysteps$steps, na.rm=TRUE)
hist(dailysteps$steps
hist(dailysteps$steps)
hist(dailysteps$steps)
intervalsteps <- aggregate(list(steps=activity$steps), by = list(date = activity$interval), FUN = "sum")
hist(intervalsteps)
hist(intervalsteps$steps)
intervalsteps
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "sum")
head(intervalsteps)
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "sum")
intervalsteps
?aggregate
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "mean")
intervalsteps
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "mean", na.action=na.omit)
intervalsteps
summary(intervalsteps)
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "sum", na.action=na.omit)
intervalsteps
str(activity)
summary(activity)
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "sum", na.rm=TRUE)
intervalsteps
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "mean", na.rm=TRUE)
intervalsteps
dailysteps <- aggregate(list(steps=activity$steps), by = list(date = activity$date), FUN = "sum", na.rm=TRUE)
dailysteps
?plot
plot(intervalsteps$interval, intervalsteps$steps)
line(intervalsteps$interval, intervalsteps$steps)
lines(intervalsteps$interval, intervalsteps$steps)
clr
lines(intervalsteps$interval, intervalsteps$steps)
plot(intervalsteps$interval, intervalsteps$steps, type="l")
as.POSIXlt(intervalsteps$interval)
strptime(intervalsteps$interval,"hh:mm")
strptime(5,"hh:mm")
strptime("5","hh:mm")
as.POSIXlt(5,)
as.POSIXct(strptime(5, format = "%H:%M","GMT"))
as.POSIXct(strptime("5", format = "%H:%M","GMT"))
as.POSIXct(strptime("105", format = "%H:%M","GMT"))
as.POSIXct(strptime(105, format = "%H:%M","GMT"))
summary
summary(intervalsteps)
plot(intervalsteps$interval, intervalsteps$steps, type="l", xlab="Minute intervals")
plot(intervalsteps$interval, intervalsteps$steps, type="l", xlab="Minute intervals", ylab="Steps")
plot(intervalsteps$interval, intervalsteps$steps, type="l", xlab="Minute intervals", ylab="Steps (mean)")
which.max(intervalsteps[,2])
intervalsteps([which.max(intervalsteps[,2]),])
intervalsteps([which.max(intervalsteps[,2]),])
intervalsteps9104
intervalsteps(104)
intervalsteps[104]
intervalsteps[104,]
intervalsteps[which.max(intervalsteps[,2]),]
is.na(activity)
is.na(activity)=TRUE
is.na(activity)
activity <- read.csv("activity.csv")
activity[!complete.cases(tivity),]
activity[!complete.cases(activity),]
count(activity[!complete.cases(activity),])
sum(activity[!complete.cases(activity),])
!complete.cases(activity)
count(!complete.cases(activity))
count(complete.cases(activity))
activity[is.na(activity)]
count(activity[is.na(activity)])
count(activity[is.na(activity)],2)
count(activity[is.na(activity)],1)
count(1,activity[is.na(activity)])
count(2,activity[is.na(activity)])
count(activity[is.na(activity)],1)
activity[is.na(activity)]
activity[is.na(activity)]
!complete.cases(activity)
!complete.cases(activity)
intervalsteps[which.max(intervalsteps[,2]),]
intervalsteps[which.NA(intervalsteps[,2]),]
intervalsteps[which.na(intervalsteps[,2]),]
?data.frame(apply)
activity[is.na(activity)] = intervalsteps$step
activity
head(activity,30)
count(activity[is.na(activity)],1)
hist(dailysteps$steps)
mean(dailysteps$steps, na.rm=TRUE)
median(dailysteps$steps, na.rm=TRUE)
weekday(activity$date)
weekdays(activity$date)
?weekdays()
weekdays(as.character(activity$date))
weekdays("5/16/2014")
weekdays(5/16/2014)
weekdays(as.POSIXct(activity$date), tz="")
weekdays(as.POSIXct(activity$date), "EST")
weekdays(activity$date)
names(Activity)
names(activity)
str(activity)
weekdays(activity$date)
weekdays(as.date(activity$date)
weekdays(as.date(activity$date))
?weekdays()
weekdays(activity$date)
weekdays(activity$date)
is.factor(activity$date)
is.ordered(activity$date)
is.factor(activity$interval)
summary(activity$interval)
summary(activity$date)
strptime(activity$Date, "%d/%m/%Y %H:%M:%S")
summary(activity$Date)
head(activity)
strptime(activity$date, "%d/%m/%Y %H:%M:%S")
summary(activity$date)
summary(activity)
str(activity)
type(activity$date)
class(activity$date)
as.Date(activity$date, format = "%m/%d/%Y")
as.Date(factor("1/15/2006 0:00:00"), format = "%m/%d/%Y")
x <- as.Date(activity$date, format = "%m/%d/%Y")
x
head x
head(x)
summary(x)
class(x)
x <- as.Date(strptime(activity$date, "%d/%m/%Y %H:%M:%S"), format = "%m/%d/%Y")
head(x)
as.character(activity$date)
as.Date(as.character(activity$date))
x<-as.Date(as.character(activity$date))
head x
head(x)
class(x)
weekdays(x)
activity <- read.csv("activity.csv"
activity <- read.csv("activity.csv")
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "mean", na.rm=TRUE)
hist(dailysteps$steps)
mean(dailysteps$steps, na.rm=TRUE)
median(dailysteps$steps, na.rm=TRUE)
count(activity[is.na(activity)],1)
activity <- read.csv("activity.csv")
dailysteps <- aggregate(list(steps=activity$steps), by = list(date = activity$date), FUN = "sum", na.rm=TRUE)
intervalsteps <- aggregate(list(steps=activity$steps), by = list(interval = activity$interval), FUN = "mean", na.rm=TRUE)
hist(dailysteps$steps)
mean(dailysteps$steps, na.rm=TRUE)
median(dailysteps$steps, na.rm=TRUE)
count(activity[is.na(activity)],1)
filledactivity <- activity
filledactivity[is.na(filledactivity)] = intervalsteps$step
dailyfilledsteps <- aggregate(list(steps=filledactivity$steps), by = list(date = filledactivity$date), FUN = "sum", na.rm=TRUE)
hist(dailyfilledsteps$steps)
mean(dailyfilledsteps$steps, na.rm=TRUE)
median(dailyfilledsteps$steps, na.rm=TRUE)
filledactivity$weekday <- as.Date(as.character(filledactivity$date))
head(filledactivity)
filledactivity$weekday <- weekdays(as.Date(as.character(filledactivity$date)))
head(filledactivity)
str(filledactivity)
filledactivity$date
names(filledactivity)
filledactivity$weekday=="Saturday"
filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"
filledactivity$weekend[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]<-"weekend"
names(filledactivity)
filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),1]
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),0]
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]
filledactivity$weekend[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]\
filledactivity$weekend[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]
filledactivity$date[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),]
filledactivity[(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),1]
filledactivity(1)
filledactivity(1)
filledactivity[1]
(filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday") -> filledactivity$weekend
str(filledactivity)
filledactivity[weekend=TRUE]
filledactivity[filledactivity$weekend=TRUE]
filledactivity[filledactivity$weekend==TRUE]
filledactivity[weekend==TRUE]
filledactivity[filledactivity$weekend==TRUE]
filledactivity[filledactivity$weekend==TRUE,]
filledactivity[filledactivity$weekend==TRUE,5]->"weekend"
filledactivity
filledactivity <- activity
filledactivity[is.na(filledactivity)] = intervalsteps$step
dailyfilledsteps <- aggregate(list(steps=filledactivity$steps), by = list(date = filledactivity$date), FUN = "sum", na.rm=TRUE)
filledactivity$weekday <- as.Date(as.character(filledactivity$date))
str(filledactivity)
filledactivity$weekday <- weekdays(as.Date(as.character(filledactivity$date)))
str(filledactivity)
if (filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday") {filledactivity$weekend=="weekend"}
filledactivity$weekend <- ifelse((filledactivity$weekday=="Saturday"|filledactivity$weekday=="Sunday"),"weekend", "weekday")
str(filledactivity)
factor(filledactivity$weekend)
str(filledactivity)
filledactivity$weekend <- as.factor(filledactivity$weekend)
str(filledactivity)
head(filledactivity)
filledintervalsteps <- aggregate(list(steps=filledactivity$steps), by = list(weekend = filledactivity$weekend, interval = filledactivity$interval), FUN = "mean", na.rm=TRUE)
str(filledintervalsteps)
head(filledintervalsteps)
xyplot(filledintervalsteps$steps ~ filledintervalsteps$interval | filledintervalsteps$weekend, layout = c(1, 2))
library("lattice", lib.loc="C:/Program Files/R/R-3.0.3/library")
xyplot(filledintervalsteps$steps ~ filledintervalsteps$interval | filledintervalsteps$weekend, layout = c(1, 2))
?xyplot
xyplot(filledintervalsteps$steps ~ filledintervalsteps$interval | filledintervalsteps$weekend, layout = c(1, 2), type+"l")
xyplot(filledintervalsteps$steps ~ filledintervalsteps$interval | filledintervalsteps$weekend, layout = c(1, 2), type="l")
?hist
count(activity[is.na(activity)],1)
sum(activity[is.na(activity)],1)
count(activity[is.na(activity)],1)
count(activity[is.na(activity)],1)
activity[is.na(activity)]
?count
as.data.frame(activity[is.na(activity)],1)
as.data.frame(as.character(activity[is.na(activity)],1))
sapply(activity, function(x) sum(is.na(x)))
setwd("C:/Users/polackpeter/Desktop/Soccer/Coursera/2014 Data Science Track/Exploratory Data Analysis/Week 1/ExData_Plotting1")
###########################################################################
## Mission: Load the data and draw 4 plots
###########################################################################
## For fast loadind, first get the col classes, and then load the data.
## Data file name is "household_power_consumption.txt"
data_5rows <- read.table("household_power_consumption.txt", sep=";", header=T, nrow=5, na.strings = "?", stringsAsFactors=FALSE)
classes <- sapply(data_5rows, class)
data <- read.table("household_power_consumption.txt", sep=";", header=T, colClasses=classes, na.strings = "?", stringsAsFactors=FALSE)
## the project requires only data for 2007-02-01 and 2007-02-02
data <- subset(data, as.Date(data$Date, "%d/%m/%Y") == as.Date("01/02/2007", "%d/%m/%Y") | as.Date(data$Date, "%d/%m/%Y") == as.Date("02/02/2007", "%d/%m/%Y"))
## convert the fist two columns in date time  to data for convience
data$date_time <- strptime(paste(data$Date, data$Time), "%d/%m/%Y %H:%M:%S")
## Set locale to get "Thu Fri Sat" instead of Russian daynames
Sys.setlocale("LC_TIME", "C")
## plot the plots
png(filename = "plot4.png", width = 480, height = 480, units = "px", pointsize = 12, bg = "white")
par(mfrow=c(2, 2))
## 1st plot
plot(data$date_time, data$Global_active_power, type="l", ylab="Global Active Power", xlab="")
## 2nd plot
plot(data$date_time, data$Voltage, type="l", ylab="Voltage", xlab="datetime")
## 3rd plot
plot(data$date_time, data$Sub_metering_1, type="l", ylab="Energy sub metering", xlab="")
lines(data$date_time, data$Sub_metering_2, col="red")
lines(data$date_time, data$Sub_metering_3, col="blue")
l_col = c("black", "red", "blue")
l_legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3")
legend("topright", col=l_col, legend=l_legend, pch="—", bty="n")
## 4th plot
plot(data$date_time, data$Global_reactive_power, type="l", ylab="Global_reactive_power", xlab="datetime")
dev.off()
print("Plot 4 finished to plot4.png")
###
# Loading data
setwd('coursera')
powerdata<-read.csv("household_power_consumption.txt", sep=";", na.strings="?")
#subsetting
powerdata2 <- subset(powerdata, powerdata$Date %in% c("1/2/2007", "2/2/2007"))
powerdata2$Date<-as.character(as.Date(powerdata2$Date, format="%d/%m/%Y"))
datetime<-paste(powerdata2$Date,powerdata2$Time)
datetime2<-strptime(datetime,"%Y-%m-%d %H:%M:%S")
png("plot4.png", width=480,height=480, bg = "transparent")
par(mfcol=c(2,2))
plot(datetime2, as.numeric(powerdata2$Global_active_power), type="l", xlab="",
ylab="Global Active Power (kilowatts)")
plot(datetime2, powerdata2$Sub_metering_1, type="l", ylab="Energy sub metering",xlab="")
lines(datetime2, powerdata2$Sub_metering_2, col="red")
lines(datetime2,powerdata2$Sub_metering_3, col="blue")
legend("topright",c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1,col=c("black","red","blue"))
plot(datetime2, as.numeric(powerdata2$Voltage), type="l", xlab="datetime",
ylab="Voltage")
plot(datetime2, as.numeric(powerdata2$Global_reactive_power), type="l", xlab="datetime",
ylab="Global_reactive_power")
dev.off()
powerdata<-read.csv("household_power_consumption.txt", sep=";", na.strings="?")
#subsetting
powerdata2 <- subset(powerdata, powerdata$Date %in% c("1/2/2007", "2/2/2007"))
powerdata2$Date<-as.character(as.Date(powerdata2$Date, format="%d/%m/%Y"))
datetime<-paste(powerdata2$Date,powerdata2$Time)
datetime2<-strptime(datetime,"%Y-%m-%d %H:%M:%S")
png("plot4.png", width=480,height=480, bg = "transparent")
par(mfcol=c(2,2))
plot(datetime2, as.numeric(powerdata2$Global_active_power), type="l", xlab="",
ylab="Global Active Power (kilowatts)")
plot(datetime2, powerdata2$Sub_metering_1, type="l", ylab="Energy sub metering",xlab="")
lines(datetime2, powerdata2$Sub_metering_2, col="red")
lines(datetime2,powerdata2$Sub_metering_3, col="blue")
legend("topright",c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1,col=c("black","red","blue"))
plot(datetime2, as.numeric(powerdata2$Voltage), type="l", xlab="datetime",
ylab="Voltage")
plot(datetime2, as.numeric(powerdata2$Global_reactive_power), type="l", xlab="datetime",
ylab="Global_reactive_power")
dev.off()
powerdata<-read.csv("household_power_consumption.txt", sep=";", na.strings="?")
#subsetting
powerdata2 <- subset(powerdata, powerdata$Date %in% c("1/2/2007", "2/2/2007"))
powerdata2$Date<-as.character(as.Date(powerdata2$Date, format="%d/%m/%Y"))
datetime<-paste(powerdata2$Date,powerdata2$Time)
datetime2<-strptime(datetime,"%Y-%m-%d %H:%M:%S")
png("plot4.png", width=480,height=480, bg = "transparent")
par(mfcol=c(2,2))
plot(datetime2, as.numeric(powerdata2$Global_active_power), type="l", xlab="",
ylab="Global Active Power (kilowatts)")
plot(datetime2, powerdata2$Sub_metering_1, type="l", ylab="Energy sub metering",xlab="")
lines(datetime2, powerdata2$Sub_metering_2, col="red")
lines(datetime2,powerdata2$Sub_metering_3, col="blue")
legend("topright",c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1,col=c("black","red","blue"))
plot(datetime2, as.numeric(powerdata2$Voltage), type="l", xlab="datetime",
ylab="Voltage")
plot(datetime2, as.numeric(powerdata2$Global_reactive_power), type="l", xlab="datetime",
ylab="Global_reactive_power")
dev.off()
powerdata<-read.csv("household_power_consumption.txt", sep=";", na.strings="?")
#subsetting
powerdata2 <- subset(powerdata, powerdata$Date %in% c("1/2/2007", "2/2/2007"))
powerdata2$Date<-as.character(as.Date(powerdata2$Date, format="%d/%m/%Y"))
datetime<-paste(powerdata2$Date,powerdata2$Time)
datetime2<-strptime(datetime,"%Y-%m-%d %H:%M:%S")
png("plot4.png", width=480,height=480, bg = "transparent")
par(mfcol=c(2,2))
plot(datetime2, as.numeric(powerdata2$Global_active_power), type="l", xlab="",
ylab="Global Active Power (kilowatts)")
plot(datetime2, powerdata2$Sub_metering_1, type="l", ylab="Energy sub metering",xlab="")
lines(datetime2, powerdata2$Sub_metering_2, col="red")
lines(datetime2,powerdata2$Sub_metering_3, col="blue")
legend("topright",c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"),lty=1,col=c("black","red","blue"))
plot(datetime2, as.numeric(powerdata2$Voltage), type="l", xlab="datetime",
ylab="Voltage")
plot(datetime2, as.numeric(powerdata2$Global_reactive_power), type="l", xlab="datetime",
ylab="Global_reactive_power")
dev.off()
